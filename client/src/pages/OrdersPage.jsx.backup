import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { API_BASE_URL } from '../config/config';

const OrdersPage = () => {
  const { user } = useAuth();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [modalType, setModalType] = useState(''); // 'process', 'dispatch', 'deliver', 'return'
  const [filters, setFilters] = useState({
    status: '',
    startDate: '',
    endDate: ''
  });

  // Form data for different actions
  const [actionData, setActionData] = useState({
    assignedTransporter: '',
    transportMode: 'land',
    expectedDeliveryDate: '',
    packingNotes: '',
    deliveryNotes: '',
    deliverySignature: '',
    returnApproved: false,
    rejectionReason: '',
    returnCondition: 'good'
  });

  // Fetch orders
  const fetchOrders = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams();
      if (filters.status) params.append('status', filters.status);
      if (filters.startDate) params.append('startDate', filters.startDate);
      if (filters.endDate) params.append('endDate', filters.endDate);

      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/order-lifecycle?${params}`, {
        headers: {
          'Authorization': `Bearer ${user.token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setOrders(data.orders || []);
      } else {
        setError('Failed to fetch orders');
      }
    } catch (error) {
      setError('Error fetching orders: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, [filters]);

  // Handle order actions
  const handleOrderAction = async (orderId, action) => {
    try {
      let endpoint = '';
      let body = {};

      switch (action) {
        case 'process':
          endpoint = `/api/v1/order-lifecycle/process/${orderId}`;
          body = {
            packingNotes: actionData.packingNotes
          };
          break;
        case 'dispatch':
          endpoint = `/api/v1/order-lifecycle/dispatch/${orderId}`;
          body = {
            assignedTransporter: actionData.assignedTransporter,
            transportMode: actionData.transportMode,
            expectedDeliveryDate: actionData.expectedDeliveryDate
          };
          break;
        case 'deliver':
          endpoint = `/api/v1/order-lifecycle/delivered/${orderId}`;
          body = {
            deliveryNotes: actionData.deliveryNotes,
            deliverySignature: actionData.deliverySignature
          };
          break;
        case 'approve-return':
          endpoint = `/api/v1/order-lifecycle/approve-return/${orderId}`;
          body = {
            approved: actionData.returnApproved,
            rejectionReason: actionData.rejectionReason
          };
          break;
        case 'process-return':
          endpoint = `/api/v1/order-lifecycle/process-return/${orderId}`;
          body = {
            condition: actionData.returnCondition
          };
          break;
      }

      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${user.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      if (response.ok) {
        const data = await response.json();
        alert(data.message);
        fetchOrders();
        setShowModal(false);
        setSelectedOrder(null);
      } else {
        const errorData = await response.json();
        alert(errorData.message || 'Action failed');
      }
    } catch (error) {
      alert('Error: ' + error.message);
    }
  };

  // Get status color
  const getStatusColor = (status) => {
    const colors = {
      'pending': 'bg-yellow-100 text-yellow-800',
      'confirmed': 'bg-blue-100 text-blue-800',
      'processing': 'bg-purple-100 text-purple-800',
      'dispatched': 'bg-orange-100 text-orange-800',
      'delivered': 'bg-green-100 text-green-800',
      'returned': 'bg-red-100 text-red-800',
      'cancelled': 'bg-gray-100 text-gray-800',
      'completed': 'bg-green-200 text-green-900'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  };

  // Get available actions for order
  const getAvailableActions = (order) => {
    const actions = [];

    switch (order.orderStatus) {
      case 'confirmed':
        actions.push({ label: 'Process Order', action: 'process' });
        break;
      case 'processing':
        actions.push({ label: 'Dispatch', action: 'dispatch' });
        break;
      case 'dispatched':
        actions.push({ label: 'Mark Delivered', action: 'deliver' });
        break;
      case 'delivered':
        if (order.returnRequested && order.returnStatus === 'requested') {
          actions.push({ label: 'Process Return Request', action: 'approve-return' });
        } else if (order.returnStatus === 'approved') {
          actions.push({ label: 'Process Returned Items', action: 'process-return' });
        }
        break;
    }

    return actions;
  };

  // Open modal for action
  const openModal = (order, action) => {
    setSelectedOrder(order);
    setModalType(action);
    setShowModal(true);
    setActionData({
      assignedTransporter: '',
      transportMode: 'land',
      expectedDeliveryDate: '',
      packingNotes: '',
      deliveryNotes: '',
      deliverySignature: '',
      returnApproved: false,
      rejectionReason: '',
      returnCondition: 'good'
    });
  };

  const Modal = () => {
    if (!showModal || !selectedOrder) return null;

    const renderModalContent = () => {
      switch (modalType) {
        case 'process':
          return (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Process Order - {selectedOrder.orderNumber}</h3>
              <div>
                <label className="block text-sm font-medium mb-2">Packing Notes</label>
                <textarea
                  className="w-full p-2 border rounded-md"
                  rows="3"
                  value={actionData.packingNotes}
                  onChange={(e) => setActionData({ ...actionData, packingNotes: e.target.value })}
                  placeholder="Special packing instructions..."
                />
              </div>
              <div className="flex justify-end space-x-2">
                <button
                  onClick={() => setShowModal(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleOrderAction(selectedOrder._id, 'process')}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                >
                  Process Order
                </button>
              </div>
            </div>
          );

        case 'dispatch':
          return (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Dispatch Order - {selectedOrder.orderNumber}</h3>
              <div>
                <label className="block text-sm font-medium mb-2">Assigned Transporter</label>
                <input
                  type="text"
                  className="w-full p-2 border rounded-md"
                  value={actionData.assignedTransporter}
                  onChange={(e) => setActionData({ ...actionData, assignedTransporter: e.target.value })}
                  placeholder="Transporter ID or name"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Transport Mode</label>
                <select
                  className="w-full p-2 border rounded-md"
                  value={actionData.transportMode}
                  onChange={(e) => setActionData({ ...actionData, transportMode: e.target.value })}
                >
                  <option value="land">Land</option>
                  <option value="air">Air</option>
                  <option value="sea">Sea</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Expected Delivery Date</label>
                <input
                  type="date"
                  className="w-full p-2 border rounded-md"
                  value={actionData.expectedDeliveryDate}
                  onChange={(e) => setActionData({ ...actionData, expectedDeliveryDate: e.target.value })}
                  required
                />
              </div>
              <div className="flex justify-end space-x-2">
                <button
                  onClick={() => setShowModal(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleOrderAction(selectedOrder._id, 'dispatch')}
                  className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600"
                >
                  Dispatch Order
                </button>
              </div>
            </div>
          );

        case 'deliver':
          return (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Mark as Delivered - {selectedOrder.orderNumber}</h3>
              <div>
                <label className="block text-sm font-medium mb-2">Delivery Notes</label>
                <textarea
                  className="w-full p-2 border rounded-md"
                  rows="3"
                  value={actionData.deliveryNotes}
                  onChange={(e) => setActionData({ ...actionData, deliveryNotes: e.target.value })}
                  placeholder="Delivery confirmation notes..."
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Delivery Signature</label>
                <input
                  type="text"
                  className="w-full p-2 border rounded-md"
                  value={actionData.deliverySignature}
                  onChange={(e) => setActionData({ ...actionData, deliverySignature: e.target.value })}
                  placeholder="Signature or confirmation code"
                />
              </div>
              <div className="flex justify-end space-x-2">
                <button
                  onClick={() => setShowModal(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleOrderAction(selectedOrder._id, 'deliver')}
                  className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
                >
                  Mark Delivered
                </button>
              </div>
            </div>
          );

        case 'approve-return':
          return (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Process Return Request - {selectedOrder.orderNumber}</h3>
              <div className="bg-yellow-50 p-4 rounded-md">
                <p><strong>Return Reason:</strong> {selectedOrder.returnReason}</p>
                <p><strong>Requested on:</strong> {new Date(selectedOrder.returnRequestDate).toLocaleDateString()}</p>
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Decision</label>
                <div className="space-y-2">
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="returnDecision"
                      value="approve"
                      checked={actionData.returnApproved === true}
                      onChange={() => setActionData({ ...actionData, returnApproved: true })}
                      className="mr-2"
                    />
                    Approve Return
                  </label>
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="returnDecision"
                      value="reject"
                      checked={actionData.returnApproved === false}
                      onChange={() => setActionData({ ...actionData, returnApproved: false })}
                      className="mr-2"
                    />
                    Reject Return
                  </label>
                </div>
              </div>
              {actionData.returnApproved === false && (
                <div>
                  <label className="block text-sm font-medium mb-2">Rejection Reason</label>
                  <textarea
                    className="w-full p-2 border rounded-md"
                    rows="3"
                    value={actionData.rejectionReason}
                    onChange={(e) => setActionData({ ...actionData, rejectionReason: e.target.value })}
                    placeholder="Reason for rejecting the return..."
                    required
                  />
                </div>
              )}
              <div className="flex justify-end space-x-2">
                <button
                  onClick={() => setShowModal(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleOrderAction(selectedOrder._id, 'approve-return')}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                >
                  Submit Decision
                </button>
              </div>
            </div>
          );

        case 'process-return':
          return (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Process Returned Items - {selectedOrder.orderNumber}</h3>
              <div className="bg-blue-50 p-4 rounded-md">
                <p><strong>Return Status:</strong> {selectedOrder.returnStatus}</p>
                <p><strong>Items being returned:</strong> {selectedOrder.items.length} products</p>
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Condition of Returned Items</label>
                <select
                  className="w-full p-2 border rounded-md"
                  value={actionData.returnCondition}
                  onChange={(e) => setActionData({ ...actionData, returnCondition: e.target.value })}
                >
                  <option value="good">Good - Restore to Inventory</option>
                  <option value="damaged">Damaged - Do Not Restore</option>
                  <option value="defective">Defective - Do Not Restore</option>
                </select>
              </div>
              <div className="flex justify-end space-x-2">
                <button
                  onClick={() => setShowModal(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleOrderAction(selectedOrder._id, 'process-return')}
                  className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
                >
                  Process Return
                </button>
              </div>
            </div>
          );
      }
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
          {renderModalContent()}
        </div>
      </div>
    );
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Order Management</h1>
        <button
          onClick={fetchOrders}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Refresh Orders
        </button>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow-sm p-4 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">Status</label>
            <select
              className="w-full p-2 border rounded-md"
              value={filters.status}
              onChange={(e) => setFilters({ ...filters, status: e.target.value })}
            >
              <option value="">All Status</option>
              <option value="confirmed">Confirmed</option>
              <option value="processing">Processing</option>
              <option value="dispatched">Dispatched</option>
              <option value="delivered">Delivered</option>
              <option value="returned">Returned</option>
              <option value="completed">Completed</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Start Date</label>
            <input
              type="date"
              className="w-full p-2 border rounded-md"
              value={filters.startDate}
              onChange={(e) => setFilters({ ...filters, startDate: e.target.value })}
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">End Date</label>
            <input
              type="date"
              className="w-full p-2 border rounded-md"
              value={filters.endDate}
              onChange={(e) => setFilters({ ...filters, endDate: e.target.value })}
            />
          </div>
        </div>
      </div>

      {/* Orders Table */}
      <div className="bg-white rounded-lg shadow-sm">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Order Details
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Customer
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Items
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Amount
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan="6" className="text-center py-4">Loading...</td>
                </tr>
              ) : error ? (
                <tr>
                  <td colSpan="6" className="text-center py-4 text-red-500">{error}</td>
                </tr>
              ) : orders.length === 0 ? (
                <tr>
                  <td colSpan="6" className="text-center py-4">No orders found</td>
                </tr>
              ) : (
                orders.map((order) => (
                  <tr key={order._id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900">{order.orderNumber}</div>
                        <div className="text-sm text-gray-500">
                          {new Date(order.orderDate).toLocaleDateString()}
                        </div>
                        {order.trackingNumber && (
                          <div className="text-sm text-blue-600">Track: {order.trackingNumber}</div>
                        )}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{order.customerId?.customerName || 'N/A'}</div>
                      <div className="text-sm text-gray-500">{order.customerId?.email || 'N/A'}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(order.orderStatus)}`}>
                        {order.orderStatus}
                      </span>
                      {order.returnRequested && (
                        <div className="mt-1">
                          <span className="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full">
                            Return: {order.returnStatus}
                          </span>
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {order.items?.length || 0} items
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      ${order.finalAmount?.toFixed(2) || '0.00'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        {getAvailableActions(order).map((action) => (
                          <button
                            key={action.action}
                            onClick={() => openModal(order, action.action)}
                            className="bg-blue-500 text-white px-3 py-1 rounded text-xs hover:bg-blue-600"
                          >
                            {action.label}
                          </button>
                        ))}
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      <Modal />
    </div>
  );
};

export default OrdersPage;
